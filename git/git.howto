

##############################################################################

Content

I. Installation

II. How to use

# Removing remote repository: "git remote rm <repo_name>"

# Undoing Changes

# git checkout

# synchronizing (fetch / pull / push)

# Making a Pull Request

# Branches (branch / checkout / merge)

# Resolving Conflicts

##############################################################################

References

https://www.atlassian.com/git/tutorials/

http://git-scm.com/doc


##############################################################################


##############################################################################
I. Installation 
##############################################################################

#MAC configuration (if xcode installed)

## I have XCode installed (and consequently it's bundled git); how do I get my 
## system to use this version instead?
## 
## If you have XCode installed, and want to use a later git, running the 
## following should help:

    sudo mv /usr/bin/git /usr/bin/git-xcode
    sudo ln -sf /usr/local/git/bin/git /usr/bin/git



## WARNING: Character “~” en ventana de comandos del MAC
fn + DEL =  caracter   “~”



##############################################################################
II. How to use
##############################################################################


##############################################################################

# Removing remote repository: "git remote rm <repo_name>"

# If you want to remove a remote for some reason – you’ve moved the server or
# are no longer using a particular mirror, or perhaps a contributor isn’t
# contributing anymore – you can use git remote rm:
git remote rm <name>
git remote rename <old_name> <new_name>

# show repository info
git remote show data_science

##############################################################################


##############################################################################
# Checking
##############################################################################


##############################################################################
#
# Viewing old commits
#
# (first move to the repository directory)
#
##############################################################################

git checkout <commit> <file>

# Check out a previous version of a file. This turns the <file> that resides in
# the working directory into an exact copy of the one from <commit> and adds it
# to the staging area.




##############################################################################
#
# Checking Out old commits
#
# (first move to the repository directory & the master branch)
#
# This can be used to view an old state of your project without altering your
# current state in any way.
# 
# Checking out an old commit is a read-only operation. It’s impossible to harm
# your repository while viewing an old revision.
##############################################################################

git checkout <commit>

# Once you’re back in the master branch, you can use either "git revert" or "git
# reset" to undo any undesired changes.



##############################################################################
#
# Checking Out a File
#
# (first move to the repository directory & the master branch)
#
# Checking out an old commit is a read-only operation. It’s impossible to harm
# your repository while viewing an old revision.
##############################################################################


# unlike checking out a commit, this does affect the current state of your 
# project

git checkout <commit> <file> 


# if you decide you don’t want to keep the old version, you can check out the 
# most recent version with the following:

git checkout HEAD <file>



##############################################################################
#
# Undoing Changes
#
# Reverting vs. Resetting:
#
# undo a public commit:  git revert
# undo local changes:    git reset
# removes untracked files from your working directory:  git clean
# keeps track of updates to the tip of branches:  git reflog
#
##############################################################################


git revert <commit>

git reset <file>
git reset
git reset --hard

# See Examples:
# Unstaging a File (reset) 
# Removing Local Commits (reset)
# (https://www.atlassian.com/git/tutorials/undoing-changes/git-reset) 

Example of reset.-

rm file_feature.txt
# how to recover the file?
git reset HEAD file_feature.txt
git checkout -- file_feature.txt


# clean       # remove untracked (and ignored) files
git clean -n  # don't really remove
git clean -f  # remove all the untracked files
git clean -f <path>  # remove
git clean -df # remove files and directories
git clean -xf # remove also ignored files


#
# Discussion
#
# The "git reset --hard" and "git clean -f" commands are your best friends after
# you’ve made some embarrassing developments in your local repository and want
# to burn the evidence. Running both of them will make your working directory
# match the most recent commit, giving you a clean slate to work with.





##############################################################################
#
# Rewriting history
# 
# https://www.atlassian.com/git/tutorials/rewriting-history/
#
##############################################################################


>> git commit --amend
# Combine the staged changes with the previous commit and replace the previous
# commit with the resulting snapshot. Running this when there is nothing staged
# lets you edit the previous commit’s message without altering its snapshot.

# WARNING:  Don’t Amend Public Commits !!!


>> git rebase <base>

# Rebase the current branch onto <base>, which can be any kind of commit
# reference (an ID, a branch name, a tag, or a relative reference to HEAD).

# WARNING:  Don’t Rebase Public Commits !!!


>> git reflog <--relative-date>

# Git keeps track of updates to the tip of branches using a mechanism called
# reflog. This allows you to go back to changesets even though they are not
# referenced by any branch or tag.

# unix >>git reflog
# 2ea1091 HEAD@{0}: commit: cambio file
# 099eb9d HEAD@{1}: commit: masxsxc
# f203e11 HEAD@{2}: commit: cambios
# e73fb80 HEAD@{3}: clone: from https://github.com/your_user_name_here/test-repo.git



##############################################################################
#
# Syncing
# 
# https://www.atlassian.com/git/tutorials/syncing
# 
# git remote# 
# git fetch 
# git pull
# git push

# 1) synchronizing your local repository with a remote repository is actually a
# two-step process: fetch, then merge.
#
# or
# short-cut the operation using   only "pull"


# 2) synchronizing a remote repo with your local content = push

##############################################################################


git remote -v
# List the remote connections you have to other repositories.


# 
# git fetch
# 
# The git fetch command imports commits from a remote repository into your
# local repo. This gives you a chance to review changes before integrating them
# into your copy of the project.

git fetch <remote> <branch>  # WARNING: requires a manual MERGE later
#
# Fetch branch (all the branches) from the repository. This also downloads all
# of the required commits and files from the other repository.


git pull <remote>   # = fetch & merge
#
# Fetch the specified remote’s copy of the current branch and immediately merge
# it into the local copy. This is the same as git fetch <remote> followed by
# git merge origin/<current-branch>.


git pull --rebase <remote>  # = fetch & rebase
#
# Same as the above command, but instead of using git merge to integrate the
# remote branch with the local one, use git rebase.


# In fact, pulling with --rebase is such a common workflow that there is a
# dedicated configuration option for it:
git config --global branch.autosetuprebase always
# After running that command, all git pull commands will integrate via git
# rebase instead of git merge.


1) Use example <pull>

# Given updated file "new_file_1.txt" in a remote repository

git checkout master        # move to branch named 'master'
git pull --rebase origin   # get and merge all the new files

 unix >>git pull --rebase origin
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/your_user_name_here/test-repo
   4bd41ad..38cb042  master     -> origin/master
First, rewinding head to replay your work on top of it...
Fast-forwarded master to 38cb042830a3d9481e2ec12709ca7b7c530d5403.


2) Use example <fetch + merge> :

# Given updated file "new_file_1.txt" in a remote repository

git branch -r
# See all the remote branches

  origin/HEAD -> origin/master
  origin/master


 unix >>git fetch origin
# This will display the branches that were downloaded:
remote: Counting objects: 3, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/your_user_name_here/test-repo
   2ea1091..4bd41ad  master     -> origin/master


# To see what commits have been added to the upstream master, you can run a git
# log using origin/master as a filter

unix >>git log --oneline master..origin/master
4bd41ad Update new_file_1.txt


# To approve the changes and merge them into your local master branch with the
# following commands:

git checkout master
git log [origin/master] -n 3

# the current status is:
unix >>git status
On branch master
Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.
  (use "git pull" to update your local branch)
nothing to commit, working directory clean


# Then we can use git merge origin/master

git merge origin/master

Updating 2ea1091..4bd41ad
Fast-forward
 new_file_1.txt | 1 +
 1 file changed, 1 insertion(+)

# The origin/master and master branches now point to the same commit, and you
# are synchronized with the upstream developments.




##############################################################################
#
# Making a Pull Request
# 
# https://www.atlassian.com/git/tutorials/making-a-pull-request
# 
##############################################################################


# Feature Branch Workflow With Pull Requests
#
# A developer pushes a completed feature to a shared repo.


# Gitflow Workflow With Pull Requests
#
# A developer pushes a completed feature to a shared repo.


# Forking Workflow With Pull Requests
#
# A developer pushes a completed feature to their own public repository instead
# of a shared one.
#
# See example at:
# https://www.atlassian.com/git/tutorials/making-a-pull-request/example



##############################################################################
#
# Branches
#
# https://www.atlassian.com/git/tutorials/using-branches/git-checkout/
#
##############################################################################

# In Git, branches are a part of your everyday development process. 
# When you want to add a new feature or fix a bug, you spawn a new branch to
# encapsulate your changes.
#

# It's important to understand that branches are just pointers to commits. 


#
# Create & Remove Branches
#

git branch
# List all of the branches in your repository.

git branch <branch>
# Create a new branch called <branch>. This does not check out the new branch.

git branch -d <branch>
# Delete the specified branch. This is a “safe” operation in that Git prevents
# you from deleting the branch if it has unmerged changes.

git branch -D <branch>
# Force delete the specified branch, even if it has unmerged changes. This is
# the command to use if you want to permanently throw away all of the commits
# associated with a particular line of development.

git branch -m <branch>
# Rename the current branch to <branch>.



#
# git checkout
#

git checkout <existing-branch>
# navigate to the specified branch, which should have already been created with
# git branch. This makes <existing-branch> the current branch, and updates the
# working directory to match.

git checkout -b <new-branch>
# Create and check out <new-branch>. 
# -b option == 1) git branch <new-branch> & then 2) git checkout <new-branch>.

git checkout -b <new-branch> <existing-branch>
# Same as the above invocation, but base the new branch off of
# <existing-branch> instead of the current branch.


#
# WARNING Detached HEADs
#
# HEAD is Git’s way of referring to the current snapshot.
# 
# After "git checkout <commit>" Git switches into a “detached HEAD” state (a
# pointer to place before Master commit)
# 
# WARNING: Never update features in a detached HEAD because there is no way to
# have a reference to it




#
# git merge
#
# https://www.atlassian.com/git/tutorials/using-branches/git-merge
#

# The git merge command lets you take the independent lines of development
# created by git branch and integrate them into a single branch.
#
# The current branch will be updated to reflect the merge, but the target
# branch will be completely unaffected (remove when unuseful


git merge <branch>
# Merge the specified branch into the current branch. Git will determine the
# merge algorithm automatically (discussed below).

git merge --no-ff <branch>
# Merge the specified branch into the current branch, but always generate a
# merge commit (even if it was a fast-forward merge). This is useful for
# documenting all merges that occur in your repository.

#
# Example of how to work with branches.-
#

# 1) create temporal_branch
git branch new-feature
git checkout new-feature

# 2) use the brach
# Edit some files
git add <file>
git commit -m "Started work on a new feature"
# Repeat

# 3) back to main brach
git checkout master
# From here, you have the option to merge in the completed feature, branch off
# a brand new, unrelated feature, or do some work with the stable version of
# your project

# 4) merge with master branch
git merge --no-ff new-feature #now the merge result is in "master" branch

# 5) remove temporal_branch
git branch -d new-feature



# Resolving Conflicts

# If the two branches you‘re trying to merge both changed the same part of the
# same file, Git won’t be able to figure out which version to use.
 
git status
# Shows you which files need to be resolved. For example, if both branches
# modified the same section of hello.py, you would see something like the
# following:
#
# On branch master
# Unmerged paths:
# (use "git add/rm ..." as appropriate to mark resolution)
#
# both modified: hello.py
#
# Then ...
#
# Resolve the conflict
# add file
# commit file


